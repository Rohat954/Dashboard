import Head from "next/head"
import AppContext from "/src/components/AppContext"
import { useCallback, useContext } from "react"
import { useRouter } from "next/router"
import Header from "../src/components/Header"
import * as Yup from "yup"
import { Form, Formik, Field } from "formik"
import { AppContextProvider } from "../src/components/AppContext"

const checkData = Yup.object().shape({
  amount: Yup.number().required("Required"),
  description: Yup.string().required("Description is a required field"),
})

const AddEntry = () => {
  const { addDatas } = useContext(AppContext)
  const router = useRouter()

  const handleFormSubmit = useCallback(
    (values, { resetForm }) => {
      addDatas({
        amount: values.amount,
        description: values.description,
      })
      resetForm()

      return true
    },
    [addDatas]
  )

  const titleCheck = () => {
    if (router.pathname === "/add-entry") {
      router.pathname = "ADD ENTRY"
    }
    return router.pathname
  }
  console.log(router.pathname)

  return (
    <AppContextProvider>
      <Head>
        <title>{router.pathname === "/add-entry" ? "ADD ENTRY" : "JOURNAL"}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header content="Add new entry" />

      <Formik
        initialValues={{
          amount: "0",
          description: "",
        }}
        validationSchema={checkData}
        onSubmit={handleFormSubmit}
      >
        {({ errors, touched }) => (
          <Form>
            <div className="mb-8">
              <Field
                id="amount"
                className={`w-full mb-1 p-2 border-2 rounded`}
                name="amount"
                placeholder="Montant"
              ></Field>
              {errors.amount && touched.amount ? (
                <div className="errorField w-full p-2 bg-red-200 text-red-500">
                  {errors.amount}
                </div>
              ) : null}
            </div>
            <div className="mb-8">
              <Field
                as="textarea"
                id="description"
                className={`h-32 w-full mb-1 p-2 border-2 rounded`}
                name="description"
                placeholder="Description"
              ></Field>
              {errors.description && touched.description ? (
                <div className="errorField w-full p-2 bg-red-200 text-red-500">
                  {errors.description}
                </div>
              ) : null}
            </div>
            <button
              className="w-full p-2 text-white bg-gray-700 font-bold"
              type="submit"
            >
              ADD
            </button>
          </Form>
        )}
      </Formik>
    </AppContextProvider>
  )
}

export default AddEntry
